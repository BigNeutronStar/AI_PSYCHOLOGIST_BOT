import asyncio

from aiogram import Router, F
from aiogram.fsm.context import FSMContext

from states.techniques_states import GratitudeStates, FiveSensesStates
from utils.keyboards import main_menu_keyboard, give_start_technique_keyboard, give_subscribe_inline_keyboard, \
    relaxation_keyboard, self_help_keyboard, feelings_keyboard
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
router = Router()


# ----------------------
# –ö–æ–º–∞–Ω–¥–∞ /relax
# ----------------------
@router.message(Command("relax"))
@router.message(F.text == "–†–µ–ª–∞–∫—Å")
async def suggest_relaxation(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–∏–∫—É —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏:", reply_markup=relaxation_keyboard)


@router.callback_query(F.data == "breathing")
async def breathing_exercise(callback: CallbackQuery):
    await callback.message.answer(
        "–¢–µ—Ö–Ω–∏–∫–∞ '4-7-8': –í–¥–æ—Ö–Ω–∏—Ç–µ –Ω–∞ 4 —Å–µ–∫—É–Ω–¥—ã, –∑–∞–¥–µ—Ä–∂–∏—Ç–µ –¥—ã—Ö–∞–Ω–∏–µ –Ω–∞ 7 —Å–µ–∫—É–Ω–¥, –≤—ã–¥–æ—Ö–Ω–∏—Ç–µ –Ω–∞ 8 —Å–µ–∫—É–Ω–¥.",
        reply_markup=give_start_technique_keyboard("breathing"))


@router.callback_query(F.data == "start_breathing")
async def start_breathing(callback: CallbackQuery, state: FSMContext):
    await state.update_data(technique="breathing")

    await callback.message.answer("–í–¥–æ—Ö–Ω–∏—Ç–µ –Ω–∞ 4 —Å–µ–∫—É–Ω–¥—ã...")
    await asyncio.sleep(4)
    await callback.message.answer("–ó–∞–¥–µ—Ä–∂–∏—Ç–µ –¥—ã—Ö–∞–Ω–∏–µ –Ω–∞ 7 —Å–µ–∫—É–Ω–¥...")
    await asyncio.sleep(7)
    await callback.message.answer("–í—ã–¥–æ—Ö–Ω–∏—Ç–µ –Ω–∞ 8 —Å–µ–∫—É–Ω–¥...")
    await asyncio.sleep(8)
    await callback.message.answer("–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?", reply_markup=feelings_keyboard)


@router.callback_query(F.data == "meditation")
async def meditation_exercise(callback: CallbackQuery):
    await callback.message.answer(
        "–ú–µ–¥–∏—Ç–∞—Ü–∏—è: –°—è–¥—å—Ç–µ —É–¥–æ–±–Ω–æ, –∑–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞ –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–µ–º –¥—ã—Ö–∞–Ω–∏–∏. –î—ã—à–∏—Ç–µ –º–µ–¥–ª–µ–Ω–Ω–æ –∏ –≥–ª—É–±–æ–∫–æ.",
        reply_markup=give_start_technique_keyboard("meditation")
    )


@router.callback_query(F.data == "start_meditation")
async def start_meditation(callback: CallbackQuery, state: FSMContext):
    await state.update_data(technique="meditation")
    await callback.message.answer("–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –¥—ã—Ö–∞–Ω–∏–∏... –ß–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É —è —Å–ø—Ä–æ—à—É –æ –≤–∞—à–µ–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏")
    await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
    await callback.message.answer("–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?", reply_markup=feelings_keyboard)


@router.callback_query(F.data == "progressive")
async def progressive_relaxation(callback: CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        "–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è: –ù–∞–ø—Ä—è–≥–∞–π—Ç–µ –∏ —Ä–∞—Å—Å–ª–∞–±–ª—è–π—Ç–µ –º—ã—à—Ü—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏, –Ω–∞—á–∏–Ω–∞—è —Å –Ω–æ–≥ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—è –ª–∏—Ü–æ–º.",
        reply_markup=give_subscribe_inline_keyboard("progressive")
    )


# ----------------------
# –ö–æ–º–∞–Ω–¥–∞ /self_help
# ----------------------
@router.message(Command("self_help"))
@router.message(F.text == "–£—Å–ø–æ–∫–æ–∏—Ç—å —Å–µ–±—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ")
async def suggest_self_help(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–∏–∫—É —Å–∞–º–æ–ø–æ–º–æ—â–∏:", reply_markup=self_help_keyboard)


@router.callback_query(F.data == "gratitude")
async def gratitude_journal(callback: CallbackQuery):
    await callback.message.answer(
        "–ó–∞–ø–∏—à–∏ 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω.",
        reply_markup=give_start_technique_keyboard("gratitude")
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
@router.callback_query(F.data == "start_gratitude")
async def start_gratitude(callback: CallbackQuery, state: FSMContext):
    await state.update_data(technique="gratitude")
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –≤–µ—â—å, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã:")
    await state.set_state(GratitudeStates.first)


@router.message(GratitudeStates.first)
async def gratitude_first(message: Message, state: FSMContext):
    await state.update_data(first_gratitude=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ç–æ—Ä—É—é –≤–µ—â—å, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã:")
    await state.set_state(GratitudeStates.second)


@router.message(GratitudeStates.second)
async def gratitude_second(message: Message, state: FSMContext):
    await state.update_data(second_gratitude=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ç—Ä–µ—Ç—å—é –≤–µ—â—å, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã:")
    await state.set_state(GratitudeStates.third)


@router.message(GratitudeStates.third)
async def gratitude_third(message: Message, state: FSMContext):
    await state.update_data(third_gratitude=message.text)
    data = await state.get_data()
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞–ø–∏—Å–∞–ª–∏:\n"
        f"1. {data['first_gratitude']}\n"
        f"2. {data['second_gratitude']}\n"
        f"3. {data['third_gratitude']}\n"
        f"–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?",
        reply_markup=feelings_keyboard
    )


@router.callback_query(F.data == "five_senses")
async def five_senses_exercise(callback: CallbackQuery):
    await callback.message.answer(
        "–ù–∞–∑–æ–≤–∏ 5 –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤–∏–¥–∏—à—å, 4 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–ª—ã—à–∏—à—å, 3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, "
        "2 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –æ—â—É—â–∞–µ—à—å –Ω–∞ –≤–∫—É—Å, –∏ 1 –≤–µ—â—å, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –∑–∞–ø–∞—Ö–æ–º.",
        reply_markup=give_start_technique_keyboard("five_senses")
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ 5 –æ—Ä–≥–∞–Ω–æ–≤ —á—É–≤—Å—Ç–≤
@router.callback_query(F.data == "start_five_senses")
async def start_five_senses(callback: CallbackQuery, state: FSMContext):
    await state.update_data(technique="five_senses")
    await callback.message.answer("–ù–∞–∑–æ–≤–∏—Ç–µ 5 –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–∏–¥–∏—Ç–µ:")
    await state.set_state(FiveSensesStates.see)


@router.message(FiveSensesStates.see)
async def five_senses_see(message: Message, state: FSMContext):
    await state.update_data(see=message.text)
    await message.answer("–ù–∞–∑–æ–≤–∏—Ç–µ 4 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–ª—ã—à–∏—Ç–µ:")
    await state.set_state(FiveSensesStates.hear)


@router.message(FiveSensesStates.hear)
async def five_senses_hear(message: Message, state: FSMContext):
    await state.update_data(hear=message.text)
    await message.answer("–ù–∞–∑–æ–≤–∏—Ç–µ 3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ:")
    await state.set_state(FiveSensesStates.feel)


@router.message(FiveSensesStates.feel)
async def five_senses_feel(message: Message, state: FSMContext):
    await state.update_data(feel=message.text)
    await message.answer("–ù–∞–∑–æ–≤–∏—Ç–µ 2 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—â—É—â–∞–µ—Ç–µ –Ω–∞ –≤–∫—É—Å:")
    await state.set_state(FiveSensesStates.taste)


@router.message(FiveSensesStates.taste)
async def five_senses_taste(message: Message, state: FSMContext):
    await state.update_data(taste=message.text)
    await message.answer("–ù–∞–∑–æ–≤–∏—Ç–µ 1 –≤–µ—â—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –∑–∞–ø–∞—Ö–æ–º:")
    await state.set_state(FiveSensesStates.smell)


@router.message(FiveSensesStates.smell)
async def five_senses_smell(message: Message, state: FSMContext):
    await state.update_data(smell=message.text)
    data = await state.get_data()
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –í—ã –Ω–∞–∑–≤–∞–ª–∏:\n"
        f"5 –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∏—Ç–µ: {data['see']}\n"
        f"4 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª—ã—à–∏—Ç–µ: {data['hear']}\n"
        f"3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ: {data['feel']}\n"
        f"2 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—â—É—â–∞–µ—Ç–µ –Ω–∞ –≤–∫—É—Å: {data['taste']}\n"
        f"1 –≤–µ—â—å, –∫–æ—Ç–æ—Ä—É—é —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –∑–∞–ø–∞—Ö–æ–º: {data['smell']}\n"
        f"–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?",
        reply_markup=feelings_keyboard
    )


# ----------------------
# Handle Feelings
# ----------------------
@router.callback_query(F.data == "feel_better")
async def handle_feel_better(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–†–∞–¥, —á—Ç–æ –≤–∞–º —Å—Ç–∞–ª–æ –ª—É—á—à–µ! üòä")

    data = await state.get_data()
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    await callback.message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —ç—Ç–æ–π —Ç–µ—Ö–Ω–∏–∫–∏.", reply_markup=give_subscribe_inline_keyboard(data.get("technique", "unknown")))
    await state.clear()


@router.callback_query(F.data == "feel_same")
async def handle_feel_same(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤–∞–º –ø–æ–∫–∞ –Ω–µ —Å—Ç–∞–ª–æ –ª—É—á—à–µ. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç –¥—Ä—É–≥—É—é —Ç–µ—Ö–Ω–∏–∫—É.", reply_markup=main_menu_keyboard)

    await state.clear()
