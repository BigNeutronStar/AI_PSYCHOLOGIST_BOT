from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states.registration import RegistrationStates
from utils.langchain import detect_mood, generate_support_response, chat_with_gpt
from utils.keyboards import main_menu_keyboard, give_subscribe_inline_keyboard, relaxation_keyboard, self_help_keyboard
from utils.registration import check_name, check_age
from utils.scheduler import subscribe_daily_reminder, unsubscribe_daily_reminder
from utils.database import create_user
from config import bot

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
router = Router()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}


# ----------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
# ----------------------
@router.message(Command("start"))
async def start_registration(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegistrationStates.waiting_for_name)


@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    if not check_name(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.")
        return

    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(RegistrationStates.waiting_for_age)


@router.message(RegistrationStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    if not check_age(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–æ—Ç 1 –¥–æ 120).")
        return

    await state.update_data(age=message.text)
    await message.answer("–ö–∞–∫–æ–µ —É —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? (—Ä–∞–¥–æ—Å—Ç—å, –≥—Ä—É—Å—Ç—å, —Ç—Ä–µ–≤–æ–≥–∞, –∑–ª–æ—Å—Ç—å, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ)")
    await state.set_state(RegistrationStates.waiting_for_mood)


@router.message(RegistrationStates.waiting_for_mood)
async def process_mood(message: Message, state: FSMContext):
    await state.update_data(mood=message.text)
    user_data = await state.get_data()
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {user_data['name']}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=main_menu_keyboard)

    await create_user(user_data, message)
    await state.clear()


# ----------------------
# –ö–æ–º–∞–Ω–¥–∞ /mood
# ----------------------
@router.message(Command("mood"))
async def handle_mood(message: Message):
    user_states[message.from_user.id] = "waiting_for_mood"
    await message.answer("–ù–∞–ø–∏—à–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.")


@router.message(F.text & ~F.text.startswith("/"))
async def detect_user_mood(message: Message):
    if user_states.get(message.from_user.id) == "waiting_for_mood":
        mood = await detect_mood(message)
        await message.answer(f"–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}")
        user_states[message.from_user.id] = None
    else:
        response = await chat_with_gpt(message)
        await message.answer(response)


# ----------------------
# –ö–æ–º–∞–Ω–¥–∞ /relax
# ----------------------
@router.message(Command("relax"))
async def suggest_relaxation(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–∏–∫—É —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏:", reply_markup=relaxation_keyboard)


@router.callback_query(F.data == "breathing")
async def breathing_exercise(callback: CallbackQuery):
    await callback.message.answer("–¢–µ—Ö–Ω–∏–∫–∞ '4-7-8': –í–¥–æ—Ö–Ω–∏—Ç–µ –Ω–∞ 4 —Å–µ–∫—É–Ω–¥—ã, –∑–∞–¥–µ—Ä–∂–∏—Ç–µ –¥—ã—Ö–∞–Ω–∏–µ –Ω–∞ 7 —Å–µ–∫—É–Ω–¥, –≤—ã–¥–æ—Ö–Ω–∏—Ç–µ –Ω–∞ 8 —Å–µ–∫—É–Ω–¥.",
                                  reply_markup=give_subscribe_inline_keyboard('breathing'))


@router.callback_query(F.data == "meditation")
async def meditation_exercise(callback: CallbackQuery):
    await callback.message.answer("–ú–µ–¥–∏—Ç–∞—Ü–∏—è: –°—è–¥—å—Ç–µ —É–¥–æ–±–Ω–æ, –∑–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞ –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–µ–º –¥—ã—Ö–∞–Ω–∏–∏. –î—ã—à–∏—Ç–µ –º–µ–¥–ª–µ–Ω–Ω–æ –∏ –≥–ª—É–±–æ–∫–æ.",
                                  reply_markup=give_subscribe_inline_keyboard('meditation'))


@router.callback_query(F.data == "progressive")
async def progressive_relaxation(callback: CallbackQuery):
    await callback.message.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è: –ù–∞–ø—Ä—è–≥–∞–π—Ç–µ –∏ —Ä–∞—Å—Å–ª–∞–±–ª—è–π—Ç–µ –º—ã—à—Ü—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏, –Ω–∞—á–∏–Ω–∞—è —Å –Ω–æ–≥ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—è –ª–∏—Ü–æ–º.",
                                  reply_markup=give_subscribe_inline_keyboard("progressive"))


# ----------------------
# –ö–æ–º–∞–Ω–¥–∞ /self_help
# ----------------------
@router.message(Command("self_help"))
async def suggest_self_help(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–∏–∫—É —Å–∞–º–æ–ø–æ–º–æ—â–∏:", reply_markup=self_help_keyboard)


@router.callback_query(F.data == "gratitude")
async def gratitude_journal(callback: CallbackQuery):
    await callback.message.answer("–ó–∞–ø–∏—à–∏ 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω.",
                                  reply_markup=give_subscribe_inline_keyboard("gratitude"))


@router.callback_query(F.data == "five_senses")
async def five_senses_exercise(callback: CallbackQuery):
    await callback.message.answer("–ù–∞–∑–æ–≤–∏ 5 –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤–∏–¥–∏—à—å, 4 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–ª—ã—à–∏—à—å, 3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, 2 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –æ—â—É—â–∞–µ—à—å –Ω–∞ –≤–∫—É—Å, –∏ 1 –≤–µ—â—å, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –∑–∞–ø–∞—Ö–æ–º.",
                                  reply_markup=give_subscribe_inline_keyboard("five_senses"))


# ----------------------
# –ö–æ–º–∞–Ω–¥–∞ /support
# ----------------------
@router.message(Command("support"))
async def handle_support(message: Message):
    user_states[message.from_user.id] = "waiting_for_support"
    await message.answer("–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è.")


@router.message(F.text & ~F.text.startswith("/"))
async def generate_support(message: Message):
    if user_states.get(message.from_user.id) == "waiting_for_support":
        mood = await detect_mood(message)
        response = await generate_support_response(mood=mood, message=message)
        await message.answer(response)
        user_states[message.from_user.id] = None
    else:
        response = await chat_with_gpt(message)
        await message.answer(response)


# ----------------------
# –ü–æ–¥–ø–∏—Å–∫–∞ / –æ—Ç–ø–∏—Å–∫–∞
# ----------------------
subscribe_techniques = {
    "gratitude": "–î–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏",
    "five_senses": "5 —á—É–≤—Å—Ç–≤",
    "breathing": "4-7-8",
    "meditation": "–ú–µ–¥–∏—Ç–∞—Ü–∏—è",
    "progressive": "–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è",
}


@router.callback_query(F.data.startswith("subscribe_scheduler"))
async def subscribe_gratitude(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    technique_name = subscribe_techniques.get("_".join(callback.data.split('_')[2:]))
    subscribe_daily_reminder(bot, chat_id, technique_name)
    await callback.message.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ '{technique_name}'.",
                                  reply_markup=main_menu_keyboard)


@router.callback_query(F.data.startswith("unsubscribe_scheduler"))
async def unsubscribe_gratitude(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    technique_name = subscribe_techniques.get("_".join(callback.data.split('_')[2:]))
    unsubscribe_daily_reminder(chat_id, technique_name)
    await callback.message.answer(f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ '{technique_name}'.",
                                  reply_markup=main_menu_keyboard)


@router.callback_query(F.data == "cancel_subscribe_scheduler")
async def cancel_subscription(callback: CallbackQuery):
    await callback.message.answer("ü´°", reply_markup=main_menu_keyboard)
