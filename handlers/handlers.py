from handlers.technique import router as technique_router
from aiogram import Router, F
from aiogram.types import ReplyKeyboardRemove
from states.registration import RegistrationStates
from utils.langchain_api import detect_mood, generate_support_response, chat_with_gpt
from utils.keyboards import main_menu_keyboard, main_menu_buttons_texts, create_feedback_keyboard, give_subscribe_inline_keyboard
from utils.registration import check_name, check_age
from utils.scheduler import subscribe_daily_reminder, unsubscribe_daily_reminder
from utils.database import create_user_and_context
from config import bot
from states.feedback import FeedbackStates
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


# ----------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
# ----------------------
@router.message(Command("start"))
async def start_registration(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegistrationStates.waiting_for_name)


@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    if not check_name(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.")
        return

    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(RegistrationStates.waiting_for_age)


@router.message(RegistrationStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    if not check_age(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–æ—Ç 1 –¥–æ 120).")
        return

    await state.update_data(age=message.text)
    await message.answer("–ö–∞–∫–æ–µ —É —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? (—Ä–∞–¥–æ—Å—Ç—å, –≥—Ä—É—Å—Ç—å, —Ç—Ä–µ–≤–æ–≥–∞, –∑–ª–æ—Å—Ç—å, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ)")
    await state.set_state(RegistrationStates.waiting_for_mood)


@router.message(RegistrationStates.waiting_for_mood)
async def process_mood(message: Message, state: FSMContext):
    await state.update_data(mood=message.text)
    user_data = await state.get_data()
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {user_data['name']}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=main_menu_keyboard)

    await create_user_and_context(user_data, message)
    await state.clear()


# ----------------------
# –ö–æ–º–∞–Ω–¥–∞ /mood
# ----------------------
@router.message(Command("mood"))
@router.message(F.text == "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")
async def handle_mood(message: Message):
    user_states[message.from_user.id] = "waiting_for_mood"
    await message.answer("–ù–∞–ø–∏—à–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.")


@router.message(F.text & ~F.text.startswith("/") & ~F.text.func(lambda text: text in main_menu_buttons_texts))
async def detect_user_mood(message: Message):
    if user_states.get(message.from_user.id) == "waiting_for_mood":
        mood = await detect_mood(message)
        await message.answer(f"–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}")
        user_states[message.from_user.id] = None
    else:
        await handle_general_message(message)


# ----------------------
# –ö–æ–º–∞–Ω–¥–∞ /support
# ----------------------
@router.message(Command("support"))
@router.message(F.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support(message: Message):
    user_states[message.from_user.id] = "waiting_for_support"
    await message.answer("–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è.")


@router.message(F.text & ~F.text.startswith("/") & ~F.text.func(lambda text: text in main_menu_buttons_texts))
async def generate_support(message: Message):
    if user_states.get(message.from_user.id) == "waiting_for_support":
        mood = await detect_mood(message)
        response = await generate_support_response(mood=mood, message=message)
        await message.answer(response)
        user_states[message.from_user.id] = None
    else:
        await handle_general_message(message)


# ----------------------
# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# ----------------------
@router.message(F.text & ~F.text.startswith("/") & ~F.text.func(lambda text: text in main_menu_buttons_texts))
async def handle_general_message(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ë—Ä–Ω—É—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥–µ–ª—å
    print("==========>")
    response = await chat_with_gpt(message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(response)


# ----------------------
# –ü–æ–¥–ø–∏—Å–∫–∞ / –æ—Ç–ø–∏—Å–∫–∞
# ----------------------

subscribe_techniques = {
    "gratitude": "–î–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏",
    "five_senses": "5 —á—É–≤—Å—Ç–≤",
    "breathing": "4-7-8",
    "meditation": "–ú–µ–¥–∏—Ç–∞—Ü–∏—è",
    "progressive": "–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è",
}


@router.callback_query(F.data.startswith("change_subscription"))
async def give_subscribe(callback: CallbackQuery):
    technique = "_".join(callback.data.split('_')[2:])
    technique_name = subscribe_techniques.get(technique)

    await callback.message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ '{technique_name}'.",
        reply_markup=give_subscribe_inline_keyboard(technique)
    )


@router.callback_query(F.data.startswith("subscribe_scheduler"))
async def subscribe(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    technique_name = subscribe_techniques.get("_".join(callback.data.split('_')[2:]))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    subscribe_daily_reminder(bot, chat_id, technique_name)
    await callback.message.answer(
        f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ '{technique_name}'.",
        reply_markup=main_menu_keyboard
    )


@router.callback_query(F.data.startswith("unsubscribe_scheduler"))
async def unsubscribe(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    technique_name = subscribe_techniques.get("_".join(callback.data.split('_')[2:]))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    unsubscribe_daily_reminder(chat_id, technique_name)
    await callback.message.answer(
        f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ '{technique_name}'.",
        reply_markup=main_menu_keyboard
    )


@router.callback_query(F.data == "cancel_subscribe_scheduler")
async def cancel_subscription(callback: CallbackQuery):
    await callback.message.answer("ü´°", reply_markup=main_menu_keyboard)


# ----------------------
# –ö–æ–º–∞–Ω–¥–∞ /feedback
# ----------------------

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
feedback_questions = [
    "–ö–∞–∫ –≤–∞–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤?",
    "–ù–∞—Å–∫–æ–ª—å–∫–æ –±–æ—Ç –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω –≤ —Ä–µ—à–µ–Ω–∏–∏ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã?",
    "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞?",
    "–ù–∞—Å–∫–æ–ª—å–∫–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –≤–∞–º –ø–æ–∫–∞–∑–∞–ª—Å—è –±–æ—Ç?",
    "–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –ª–∏ –≤—ã —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º?",
]


# –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤
@router.message(Command("feedback"))
@router.message(F.text == "–§–∏–¥–±–µ–∫")
async def start_feedback(message: Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    await state.clear()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤
    await state.update_data(responses=[])
    await message.answer(feedback_questions[0], reply_markup=create_feedback_keyboard())
    await state.set_state(FeedbackStates.waiting_for_question_1)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
@router.callback_query(FeedbackStates.waiting_for_question_1, F.data.startswith("feedback:"))
async def handle_feedback_question_1(callback: CallbackQuery, state: FSMContext):
    await process_feedback(callback, state, current_question=0, next_state=FeedbackStates.waiting_for_question_2)


@router.callback_query(FeedbackStates.waiting_for_question_2, F.data.startswith("feedback:"))
async def handle_feedback_question_2(callback: CallbackQuery, state: FSMContext):
    await process_feedback(callback, state, current_question=1, next_state=FeedbackStates.waiting_for_question_3)


@router.callback_query(FeedbackStates.waiting_for_question_3, F.data.startswith("feedback:"))
async def handle_feedback_question_3(callback: CallbackQuery, state: FSMContext):
    await process_feedback(callback, state, current_question=2, next_state=FeedbackStates.waiting_for_question_4)


@router.callback_query(FeedbackStates.waiting_for_question_4, F.data.startswith("feedback:"))
async def handle_feedback_question_4(callback: CallbackQuery, state: FSMContext):
    await process_feedback(callback, state, current_question=3, next_state=FeedbackStates.waiting_for_question_5)


@router.callback_query(FeedbackStates.waiting_for_question_5, F.data.startswith("feedback:"))
async def handle_feedback_question_5(callback: CallbackQuery, state: FSMContext):
    await process_feedback(callback, state, current_question=4, next_state=None)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤
async def process_feedback(callback: CallbackQuery, state: FSMContext, current_question: int, next_state):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É
    rating = int(callback.data.split(":")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    data = await state.get_data()
    data["responses"].append({"question": feedback_questions[current_question], "rating": rating})
    await state.update_data(responses=data["responses"])

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.delete()

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –∑–∞–¥–∞–µ–º –µ–≥–æ
    if next_state:
        await callback.message.answer(feedback_questions[current_question + 1], reply_markup=create_feedback_keyboard())
        await state.set_state(next_state)
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        feedback = await state.get_data()
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.")
        print(f"–û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {feedback['responses']}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


# ----------------------
# –ö–æ–º–∞–Ω–¥–∞ /help (–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å)
# ----------------------
@router.message(Command("help"))
@router.message(F.text == "–ì–æ—Ä—è—á–∏–µ –ª–∏–Ω–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –ø–æ–º–æ—â—å")
async def emergency_help(message: Message):
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π –¥–∏–∞–ª–æ–≥", callback_data="calming_dialog")],
        [InlineKeyboardButton(text="–ì–æ—Ä—è—á–∏–µ –ª–∏–Ω–∏–∏ –ø–æ–º–æ—â–∏", callback_data="hotlines")]
    ])

    await message.answer(
        "–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:",
        reply_markup=keyboard
    )


# –£—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π –¥–∏–∞–ª–æ–≥
@router.callback_query(F.data == "calming_dialog")
async def calming_dialog(callback: CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏–∫—É –∑–∞–∑–µ–º–ª–µ–Ω–∏—è
    await callback.message.answer(
        "–ü–æ–ø—Ä–æ–±—É–µ–º —Ç–µ—Ö–Ω–∏–∫—É –∑–∞–∑–µ–º–ª–µ–Ω–∏—è:\n\n"
        "1. –ù–∞–∑–æ–≤–∏—Ç–µ 5 –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–∏–¥–∏—Ç–µ –≤–æ–∫—Ä—É–≥ —Å–µ–±—è.\n"
        "2. –ù–∞–∑–æ–≤–∏—Ç–µ 4 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–ª—ã—à–∏—Ç–µ.\n"
        "3. –ù–∞–∑–æ–≤–∏—Ç–µ 3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç—É—Ä—É –ø–æ–¥ —Ä—É–∫–æ–π).\n"
        "4. –ù–∞–∑–æ–≤–∏—Ç–µ 2 –∑–∞–ø–∞—Ö–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ª–æ–≤–∏—Ç—å.\n"
        "5. –ù–∞–∑–æ–≤–∏—Ç–µ 1 –≤–∫—É—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å.\n\n"
        "–î—ã—à–∏—Ç–µ –º–µ–¥–ª–µ–Ω–Ω–æ –∏ –≥–ª—É–±–æ–∫–æ. –í—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ. üå±"
    )


# –°–ø–∏—Å–æ–∫ –≥–æ—Ä—è—á–∏—Ö –ª–∏–Ω–∏–π –ø–æ–º–æ—â–∏
@router.callback_query(F.data == "hotlines")
async def hotlines(callback: CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    region = "–†–æ—Å—Å–∏—è"  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ä–µ–≥–∏–æ–Ω
    hotlines_by_region = {
        "–†–æ—Å—Å–∏—è": [
            "üìû 112 ‚Äî –ï–¥–∏–Ω—ã–π –Ω–æ–º–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É–∂–±.",
            "üìû 8-800-2000-122 ‚Äî –î–µ—Ç—Å–∫–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è.",
            "üìû 8-800-2000-600 ‚Äî –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö."
        ],
        "–°–®–ê": [
            "üìû 911 ‚Äî –ï–¥–∏–Ω—ã–π –Ω–æ–º–µ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É–∂–±.",
            "üìû 1-800-273-TALK (1-800-273-8255) ‚Äî –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –ø–æ–º–æ—â–∏ –ø—Ä–∏ —Å—É–∏—Ü–∏–¥–µ.",
            "üìû 1-866-488-7386 ‚Äî –õ–∏–Ω–∏—è –ø–æ–º–æ—â–∏ –¥–ª—è –õ–ì–ë–¢–ö+ –º–æ–ª–æ–¥—ë–∂–∏ (Trevor Project)."
        ]
    }

    hotlines = hotlines_by_region.get(region, ["–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ–∫–∞ –Ω–µ—Ç."])
    hotline_text = "\n".join(hotlines)

    await callback.message.answer(
        f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ä—è—á–∏—Ö –ª–∏–Ω–∏–π –ø–æ–º–æ—â–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region}:\n\n{hotline_text}"
    )


router.include_router(technique_router)

